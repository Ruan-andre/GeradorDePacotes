<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>